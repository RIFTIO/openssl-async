/* used by apps/speed.c */
#ifndef HEADER_DH_H
# include <openssl/dh.h>
#endif

DH *get_dh1024()
{
    static unsigned char dh1024_p[] = {
        0xE8, 0xA4, 0xD8, 0x37, 0x72, 0x5B, 0x08, 0x08, 0xC0, 0x5D, 0x9B,
        0xAC,
        0x21, 0x87, 0xD0, 0x64, 0x0A, 0xF7, 0xB9, 0x97, 0x97, 0x46, 0x9D,
        0x9E,
        0x6F, 0xF1, 0xD4, 0x87, 0x32, 0x0B, 0x40, 0x81, 0x01, 0x11, 0x9A,
        0xE4,
        0xD5, 0x51, 0x4F, 0xBF, 0x7C, 0xB0, 0x35, 0xDF, 0x57, 0x3E, 0x3B,
        0x2F,
        0xEA, 0x3F, 0xA1, 0x6E, 0x54, 0xC1, 0x5F, 0xC1, 0xC7, 0xBB, 0x00,
        0xF6,
        0x23, 0x0C, 0x30, 0x3F, 0x7C, 0xCC, 0x47, 0x5F, 0x42, 0x91, 0x68,
        0xC1,
        0x8E, 0x9F, 0x34, 0x06, 0xFA, 0x51, 0x14, 0x0F, 0x5F, 0x62, 0xA7,
        0x80,
        0xD4, 0xF8, 0x38, 0xCB, 0x2D, 0xE7, 0x19, 0x92, 0x1F, 0x82, 0xBF,
        0x58,
        0x7B, 0x15, 0xD7, 0xE5, 0xE9, 0xC8, 0xFF, 0xD2, 0xA8, 0x2B, 0x90,
        0x8F,
        0x56, 0x82, 0xC8, 0xC3, 0xB3, 0xD9, 0xF6, 0x16, 0x10, 0x95, 0xF4,
        0xAB,
        0x7C, 0x37, 0xC9, 0xC7, 0x4B, 0x17, 0x6C, 0x83,
    };
    static unsigned char dh1024_g[] = {
        0x02,
    };
    DH *dh;

    if ((dh = DH_new()) == NULL)
        return (NULL);
    dh->p = BN_bin2bn(dh1024_p, sizeof(dh1024_p), NULL);
    dh->g = BN_bin2bn(dh1024_g, sizeof(dh1024_g), NULL);
    if ((dh->p == NULL) || (dh->g == NULL)) {
        DH_free(dh);
        return (NULL);
    }
    return (dh);
}

DH *get_dh2048()
{
    static unsigned char dh2048_p[] = {
        0xD2, 0x5D, 0xDF, 0x37, 0xA4, 0xA3, 0x16, 0x63, 0xDB, 0xCD, 0x70,
        0x08,
        0xDD, 0x9E, 0x3F, 0x64, 0x28, 0xCC, 0xAB, 0x38, 0x79, 0x45, 0x5D,
        0xB2,
        0xF4, 0xCE, 0xAE, 0x24, 0xE4, 0xE8, 0x87, 0xC6, 0x34, 0xED, 0x42,
        0x8E,
        0x23, 0x2D, 0x94, 0x19, 0x64, 0x0D, 0x4C, 0xED, 0x46, 0xD1, 0xF8,
        0x9A,
        0xD3, 0x02, 0xE8, 0xB4, 0x05, 0x06, 0xD4, 0xEA, 0x12, 0x74, 0x84,
        0x73,
        0x3E, 0xF5, 0x24, 0xA4, 0xE6, 0xD5, 0x9F, 0xF0, 0x79, 0x8D, 0x9E,
        0x7F,
        0x02, 0x75, 0xB5, 0x10, 0x50, 0x7B, 0x10, 0x35, 0x5B, 0x82, 0x90,
        0x63,
        0x1F, 0x1E, 0x04, 0x65, 0xC9, 0x44, 0x4D, 0x4F, 0x08, 0xDD, 0x4A,
        0x34,
        0x67, 0xD9, 0x0F, 0x5C, 0x93, 0x2C, 0x01, 0xF6, 0xB3, 0xA3, 0x45,
        0xD0,
        0xA5, 0xC6, 0xEE, 0x16, 0xD1, 0xE3, 0xF4, 0x40, 0x92, 0x01, 0x07,
        0x51,
        0x87, 0xA5, 0x0D, 0x58, 0x93, 0x53, 0xF1, 0x7A, 0x39, 0x8B, 0xF8,
        0x42,
        0x5F, 0x71, 0x2B, 0xB4, 0x3D, 0x04, 0xB8, 0x81, 0x62, 0xFA, 0x4B,
        0xED,
        0x86, 0x55, 0x14, 0x8E, 0x50, 0x0C, 0x67, 0xA5, 0xE3, 0xC0, 0x30,
        0x85,
        0x4D, 0x77, 0x7B, 0x61, 0x91, 0xF0, 0xE3, 0xA1, 0x52, 0x41, 0x5E,
        0x45,
        0xCB, 0x15, 0xFB, 0x7F, 0x4A, 0xA2, 0x49, 0xC8, 0x6E, 0xD6, 0x68,
        0xDB,
        0x10, 0x9A, 0xAA, 0x2A, 0xD9, 0x8D, 0xA0, 0x45, 0x2E, 0x3D, 0xE3,
        0x1A,
        0xC2, 0x74, 0x8C, 0xF1, 0x7E, 0x43, 0x18, 0xFB, 0x00, 0x92, 0x30,
        0xFB,
        0xC3, 0x89, 0x4B, 0x5B, 0x22, 0x4E, 0x8E, 0x82, 0xE6, 0x74, 0x8A,
        0xAC,
        0x98, 0x62, 0x4A, 0x80, 0xB3, 0x56, 0x81, 0xA1, 0x06, 0x30, 0xB7,
        0xEA,
        0xAC, 0x42, 0x2A, 0x73, 0x96, 0xF0, 0xBD, 0xF0, 0x20, 0xAC, 0x0C,
        0xC0,
        0xD3, 0x5B, 0x71, 0x9A, 0xCB, 0x1B, 0xC1, 0x9C, 0xEC, 0x3A, 0x8D,
        0x95,
        0xF3, 0xDF, 0xA4, 0xCB,
    };
    static unsigned char dh2048_g[] = {
        0x02,
    };
    DH *dh;

    if ((dh = DH_new()) == NULL)
        return (NULL);
    dh->p = BN_bin2bn(dh2048_p, sizeof(dh2048_p), NULL);
    dh->g = BN_bin2bn(dh2048_g, sizeof(dh2048_g), NULL);
    if ((dh->p == NULL) || (dh->g == NULL)) {
        DH_free(dh);
        return (NULL);
    }
    return (dh);
}

DH *get_dh4096()
{
    static unsigned char dh4096_p[] = {
        0xF0, 0x79, 0xCD, 0xF4, 0x52, 0x4B, 0x27, 0xC9, 0xD6, 0x79, 0x21,
        0x83,
        0x48, 0x67, 0x55, 0xC3, 0x1E, 0x24, 0xD5, 0xCE, 0x58, 0xE4, 0xEA,
        0xD4,
        0x6B, 0x19, 0x4E, 0x9D, 0x74, 0xE8, 0x1B, 0x8A, 0x17, 0x6E, 0xB4,
        0x72,
        0x43, 0x6A, 0xE8, 0x55, 0x35, 0x5F, 0xA3, 0x53, 0xEC, 0x49, 0x47,
        0x28,
        0x70, 0xA7, 0x2F, 0x41, 0xE3, 0xD3, 0xEF, 0xFC, 0x29, 0x83, 0xCE,
        0xD2,
        0x1F, 0x42, 0x23, 0xE6, 0xE6, 0xB9, 0x1B, 0xF1, 0x5F, 0xA4, 0x2B,
        0x9B,
        0x04, 0x26, 0xC6, 0xFD, 0xB7, 0x54, 0xCC, 0xA6, 0x2A, 0x98, 0xC2,
        0x90,
        0x26, 0xB9, 0xDF, 0xBD, 0xF0, 0xF0, 0x66, 0xFD, 0xC8, 0xF2, 0xA6,
        0xA1,
        0x2F, 0x0D, 0xB5, 0xFC, 0x2D, 0xC4, 0xBB, 0xC9, 0xC1, 0x83, 0x41,
        0xC3,
        0xA4, 0x9F, 0xDE, 0x2D, 0x7B, 0x76, 0x65, 0x40, 0x72, 0x9C, 0xDA,
        0xCE,
        0x27, 0xE7, 0x7C, 0x48, 0xC7, 0xEE, 0x61, 0xBC, 0xB1, 0x10, 0x65,
        0x78,
        0x33, 0x30, 0xC4, 0x5A, 0x9E, 0x4B, 0xDB, 0x7C, 0x07, 0x4D, 0x5E,
        0x1C,
        0xAC, 0x17, 0xF1, 0x11, 0x2D, 0x45, 0xCB, 0x13, 0xA7, 0x9D, 0x7A,
        0x35,
        0x1A, 0x62, 0x37, 0x8A, 0x9E, 0x8C, 0x4C, 0xFF, 0xA6, 0xDC, 0x2D,
        0x3F,
        0xCB, 0x81, 0xD4, 0x87, 0xD3, 0x97, 0xDB, 0x70, 0xF2, 0x26, 0x2A,
        0xB7,
        0xC7, 0xC5, 0x1C, 0xAF, 0xEE, 0x71, 0x7B, 0xB4, 0x61, 0x65, 0x95,
        0x23,
        0x1C, 0xA5, 0xDE, 0xE1, 0x54, 0x9F, 0x3B, 0x18, 0x1C, 0x56, 0xCB,
        0x26,
        0x0F, 0x9A, 0x2F, 0x5B, 0xCC, 0x3F, 0x64, 0xAA, 0x8A, 0xC6, 0x78,
        0x6F,
        0x8C, 0x03, 0xCF, 0x8F, 0xCA, 0xA6, 0x32, 0x73, 0x43, 0x05, 0xA6,
        0xE1,
        0x2B, 0x4E, 0x17, 0xA0, 0x39, 0xEE, 0x88, 0xD1, 0x9A, 0xBD, 0xA4,
        0x16,
        0x04, 0x05, 0x83, 0x96, 0x44, 0x2D, 0xAF, 0x5F, 0x2F, 0x97, 0x8E,
        0xFA,
        0xCD, 0xE9, 0x90, 0x0D, 0xF3, 0xCA, 0x2B, 0x90, 0x21, 0x6C, 0xC7,
        0xC6,
        0xE2, 0xF1, 0xB1, 0x86, 0xF7, 0x58, 0x6C, 0x63, 0x3F, 0x6D, 0x15,
        0xB7,
        0xDC, 0x4A, 0x2A, 0xBA, 0xA2, 0xB3, 0xC8, 0xB9, 0x65, 0x8F, 0xB4,
        0x3A,
        0xC6, 0x54, 0x81, 0xAA, 0x8C, 0x2C, 0x4D, 0xB5, 0xF4, 0x17, 0x7B,
        0x1F,
        0x8C, 0x71, 0xF9, 0x32, 0x6C, 0x99, 0x9D, 0x90, 0x85, 0x45, 0x4D,
        0x4C,
        0x30, 0x3E, 0x7A, 0xA1, 0x5F, 0x14, 0x19, 0xD8, 0x40, 0x48, 0x42,
        0xD0,
        0xE6, 0xB1, 0xCB, 0xAB, 0x7F, 0xFA, 0x8B, 0x9C, 0x97, 0x97, 0x9C,
        0x4E,
        0x4F, 0x99, 0x62, 0x16, 0x8D, 0xB2, 0x84, 0xE9, 0xF8, 0x64, 0x8F,
        0xD6,
        0xB6, 0x78, 0xCA, 0x33, 0xB3, 0x4D, 0xC7, 0x2F, 0x3A, 0x40, 0x24,
        0x7E,
        0x92, 0x5F, 0x13, 0x2D, 0x70, 0xC4, 0x5A, 0xDD, 0x76, 0xC1, 0xF0,
        0x6A,
        0xF6, 0x6B, 0x81, 0xD2, 0x05, 0x7D, 0x69, 0x64, 0xAB, 0x99, 0x41,
        0xE7,
        0xDA, 0x0C, 0x6E, 0x6A, 0x60, 0x3A, 0xE0, 0x68, 0x66, 0xB6, 0x48,
        0x99,
        0x15, 0xAF, 0xEE, 0x58, 0x25, 0x38, 0xC6, 0x6F, 0xB9, 0xA9, 0x84,
        0x80,
        0x25, 0x73, 0x13, 0x37, 0x38, 0x54, 0xD9, 0xF7, 0xEA, 0xF3, 0xEA,
        0x6C,
        0x2B, 0xBF, 0x87, 0x4F, 0xBE, 0xA2, 0x32, 0xC4, 0x17, 0xF3, 0x33,
        0x56,
        0xD4, 0x7B, 0xD4, 0x3A, 0xB8, 0x67, 0xD0, 0x9E, 0x67, 0x86, 0x85,
        0x64,
        0x97, 0x6B, 0x92, 0xB0, 0xA2, 0xB7, 0x13, 0x08, 0xE3, 0xEF, 0x46,
        0xAA,
        0xDD, 0xE2, 0xF6, 0xF3, 0x92, 0x9B, 0xED, 0x56, 0x8F, 0x7E, 0xFE,
        0x5E,
        0x86, 0x13, 0x2B, 0x63, 0xCB, 0x4D, 0x62, 0x59, 0x04, 0x61, 0x18,
        0x60,
        0xB1, 0x28, 0xA1, 0x2A, 0x02, 0x92, 0x85, 0xFF, 0x95, 0x92, 0xD6,
        0x93,
        0xA3, 0x43, 0xC7, 0x20, 0x5B, 0xDA, 0x9B, 0x5F, 0x62, 0x66, 0xDA,
        0x3A,
        0x99, 0x1C, 0x6E, 0xF1, 0x47, 0xCE, 0x05, 0xE3,
    };
    static unsigned char dh4096_g[] = {
        0x02,
    };
    DH *dh;

    if ((dh = DH_new()) == NULL)
        return (NULL);
    dh->p = BN_bin2bn(dh4096_p, sizeof(dh4096_p), NULL);
    dh->g = BN_bin2bn(dh4096_g, sizeof(dh4096_g), NULL);
    if ((dh->p == NULL) || (dh->g == NULL)) {
        DH_free(dh);
        return (NULL);
    }
    return (dh);
}
